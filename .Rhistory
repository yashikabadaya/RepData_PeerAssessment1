class(sapply(list, function))
class(cls_vect)
play
play()
flags$orange
nxt()
sum(flags$orange)
flags_colors <- flags[, 11:17]
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum )
sapply(flag_color, sum)
sapply(flag_colors, sum)
sapply(flag_colors , mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range )
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags , unique)
unique_vals
lapply(unique_vals , length)
sapply(unique_vals , length)
sapply(flags , unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table
table(flags$landmass)
play()
?table
flags$landmass
nxt()
table(flags$animate)
tapply(flags$animate , flags$landmass, mean)
tapply(flags$population , flags$red ,summary)
tapply(flags$population , flags$landmass , summary)
library(iris)
library(datasets)
data("iris")
summary(iris)
tapply(iris$Sepal.Length ,iris$Species , mean)
apply(iris[, 1:4] , 1, mean)
summary(iris)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
data("mtcars")
?mtcars
lapply(mtcars, mean)
sapply(mtcars, mean)
sapply(mtcars, cyl, mean)
with(mtcars , tapply(mpg, cyl, mean))
apply(mtcars,2 , mean)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$hp, mtcars$cyl, mean)
debug(ls)
ls
library(swirl)
exit
undebug(ls)
ls
undebug(ls)
library(swirl)
swirl()
source('D:/Study_Material/ECsem6/DataScience/R programming course/matrixInv.R', echo=TRUE)
1 2 3
"1 2 3"
1
1
1
1
1
cls
source('D:/Study_Material/ECsem6/DataScience/R programming course/matrixInv.R', echo=TRUE)
x <- matrix(data = "1, 2, 3,4,5,6,7,8,9" , nrow = 3, ncol = 3)
x
x <- matrix(data = "1" , nrow = 3, ncol = 3)
x
makeCacheMatrix(x)
cacheSolve(x)
source('D:/Study_Material/ECsem6/DataScience/R programming course/matrixInv.R', echo=TRUE)
cacheSolve(x)
cacheSolve(x)
View(x)
source('D:/Study_Material/ECsem6/DataScience/R programming course/matrixInv.R', echo=TRUE)
testmat <- matrix(c(1:4), 2,2)
testmat
cachemat <- makeCacheMatrix(testmat)
cachemat$get()
cachemat$getinv()
cacheSolve(cachemat)
x<- matrix(1:4, 2 , 2)
solve(x)
source('D:/Study_Material/ECsem6/DataScience/R programming course/week4/quiz.R', echo=TRUE)
source('D:/Study_Material/ECsem6/DataScience/R programming course/week4/quiz.R', echo=TRUE)
source('D:/Study_Material/ECsem6/DataScience/R programming course/week4/quiz.R', echo=TRUE)
source('D:/Study_Material/ECsem6/DataScience/R programming course/week4/quiz.R', echo=TRUE)
source('D:/Study_Material/ECsem6/DataScience/R programming course/week4/quiz.R', echo=TRUE)
source('D:/Study_Material/ECsem6/DataScience/R programming course/week4/quiz.R', echo=TRUE)
source('D:/Study_Material/ECsem6/DataScience/R programming course/week4/quiz.R', echo=TRUE)
source('D:/Study_Material/ECsem6/DataScience/R programming course/week4/quiz.R', echo=TRUE)
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
getwd()
swirl()
library(swirl)
swirl()
mydf = read.csv(path2csv , stringsAsFactors = FALSE)
mydf = read.csv(path2csv , stringsAsFactors = FALSE)
mydf = read.csv(path2csv , stringsAsFactors = FALSE)
info()
mydf = read.csv(path2csv , stringsAsFactors = FALSE)
mydf = read.csv(path2csv, stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
exit()
exit
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
(-5:20)
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran,country == 'US'| country == "IN")
filter(cran,size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id )
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package,ip_id)
arrange(cran2, country,desc(R.version),ip_id)
arrange(cran2, country,desc(r_version),ip_id)
cran3 <- select(ip_id, package, size)
cran3 <- select(cran,ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^10)
mutate(cran3, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(swirl)
swirl()
type.Sys.getlocale("LC_TIME")
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day , label =TRUE)
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989 -05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
ymd("March 12, 1975")
mdy("March 12, 1975")
25081985
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update()
this_moment <- update(this_moment, now())
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
?now
nyc <- now(tzone = "America/ New_York")
nyc <- now() "America/ New_York")
nyc <- now( "America/ New_York")
nyc <- now( "America/New_York")
nyc
nyc + days(2)
depart <- nyc + days(2)
depart
depart <- update()
depart <- update(depart, hours = 17, minute = 34)
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- nyc + hms()
arrive <- nyc + hms(23)
arrive <- nyc + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive , tzone = 'Asia/Hong_Kong')
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
library(swirl)
swirl()
head(pollution)
dim(pollution)
pollution$pm25
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = "blue")
abline(h = 12)
hist(ppm, col = "green")
rug(ppm)
low
high
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(ppm, col = "green")
abline(v=12, lwd=2)
abline(v= median(ppm), col = "magenta", lwd = 4)
names(pollution)
table(pollution$region)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of Counties in each region")
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pm25~region , data = pollution , col = "red")
par(mfrow = c(2,1), mar = c(4,4,2,1))
east <- subset(pollution , "east")
east <- subset.data.frame(pollution , "east")
subset.data.frame(pollution , "east")
east
east <- subset.data.frame(pollution , "east")
subset.data.frame(pollution , "east")
subset.data.frame(pollution)
east <- subset.data.frame(pollution, region == "east")
east <- subset(pollution, region == "east")
head(east)
hist(east$pm25, col= "green")
hist(subset(pollution , region = "west"), col = "green")
hist(subset(pollution , region = "west")$pm25, col = "green")
hist(subset(pollution,region = "west")$pm25, col = "green")
hist(subset(pollution,region == "west")$pm25, col = "green")
plot(pollution , latitude, pm25)
?plot
plot(pollution$latitude, pollution$pm25)
with(pollution , plot(latitude , pm25))
abline(12, lwd = 2 , lty = 2)
abline(line = 12, lwd = 2 , lty = 2)
abline(h = 12, lwd = 2 , lty = 2)
plot(pollution$latitude , ppm , col = pollution$region)
abline(h=12, lwd = 2, lty = 2)
par(mfrow = c(1,2), mar = c(5,4,2,1))
west <- subset(pollution , region == "west")
with(west, plot(latitude, pm25 , title("West")))
plot(west$latitude, west$pm25 , main = "west")
plot(west$latitude, west$pm25 , main = "west")
plot(west$latitude, west$pm25 , main = "west")
par(mfrow = c(1,2), mar = c(5,4,2,1))
play()
par(mfrow = c(1,2), mar = c(5,4,2,1))
plot(west$latitude, west$pm25 , main = "west")
par(mfrow = c(1,2), mar = c(5,4,2,1))
plot(west$latitude, west$pm25 , main = "west")
par(mfrow = c(1,2), mar = c(5,4,2,1))
nxt()
plot(west$latitude, west$pm25 , main = "west")
plot()
play()
plot(pollution$latitude, pollution$pm25)
dev.off()
nxt()
par(mfrow = c(1,2), mar = c(5,4,2,1))
plot(west$latitude, west$pm25 , main = "west")
plot(west$latitude, west$pm25 , main = "west")
plot(west$latitude, west$pm25 , main = "west")
play()
dev.off()
par(mfrow = c(1,2), mar = c(5,4,2,1))
nxt()
plot(west$latitude , west$pm25 , main = "west")
plot(west$latitude, west$pm25, main = "West")
plot(East$latitude, East$pm25, main = "East")
plot(east$latitude, east$pm25, main = "east")
plot(east$latitude, east$pm25, main = "East")
quit()
library(swirl)
swirl()
back()
exit()
quit()
library(swirl)
swirl()
swirl()
?Devices
with(faithful)
with(faithful , base plotting())
with(faithful , "base plotting")
with(faithful , plot(eruptions, waiting))
title("Old Faithful Geyser data")
dev.cur()
pdf(file = "myplot.pdf")
pwd
pwd()
pdf(file = "myplot.pdf")
with(faithful , plot(eruptions, waiting))
title("Old Faithful Geyser data")
dev,cur()
dev.cur()
dev.off()
dev.cur()
with(faithful , plot(eruptions, waiting))
title("Old Faithful Geyser data")
dev.copy(png, "geyserplot.png")
dev.copy(png, file = "geyserplot.png")
dev.off()
pwd
pwd()
getwd()
library()
library(setwd)
library(swirl)
swirl()
library(swirl)
swirl()
head(airquality)
xyplot(Ozone-wind , airquality)
xyplot(Ozone~wind , airquality)
xyplot(Ozone~Wind , airquality)
xyplot(Ozone~Wind , airquality , col = "red", pch = 8 , main = "Big Apple Data")
xyplot(Ozone~Wind , data=airquality , col = "red", pch = 8 , main = "Big Apple Data")
xyplot(Ozone~Wind , data = airquality , col = "red", pch = 8 , main = "Big Apple Data")
xyplot(Ozone~Wind , data = airquality , col="red", pch=8 , main="Big Apple Data")
xyplot(Ozone~Wind , data = airquality ,pch=8 , col="red", main="Big Apple Data")
xyplot(Ozone~Wind | as.factor(Month), data = airquality ,layout = c(5,1) )
xyplot(Ozone~Wind | Month, data = airquality ,layout = c(5,1) )
p <- xyplot(Ozone~Wind, data= airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f, layout = c(2,1))
v1
v2
myedit("plot1.R")
pathtofile("plot1.R", TRUE)
pathtofile("plot1.R", local set = TRUE)
pathtofile("plot1.R", local = TRUE)
pathtofile("plot1.R", local = TRUE)
pathtofile("plot1.R", localset = TRUE)
pathtofile("plot1.R", local_set = TRUE)
pathtofile("plot1.R", set = TRUE)
pathtofile("plot1.R", TRUE)
pathtofile("plot1.R")
source(pathtofile("plot1.R"), local=TRUE))
source(pathtofile("plot1.R"), local=TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local=TRUE))
source(pathtofile("plot2.R"), local=TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"), local=TRUE)
xyplot(price~carat|color*cut, dataset = diamonds)
xyplot(price~carat| color*cut, dataset = diamonds)
xyplot(price~carat| color*cut, diamonds)
xyplot(price~carat|color*cut,data=diamonds,strip=FALSE,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
xyplot(price~carat|color*cut,data=diamonds,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
library(swirl)
swirl()
str(mpg)
qplot( displ, hwy, mpg)
qplot(displ, hwy, mpg)
qplot(displ, hwy, dataset=mpg)
qplot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg, color = drv)
qplot(displ, hwy, data=mpg, color = drv, geom = c("point", "smooth"))
qplot(y=hwy, data=mpg, color= drv)
myhigh
qplot(y=hwy, data=mpg, color= drv, geom = "boxplot")
qplot(drv,hwy, data=mpg, geom = "boxplot")
qplot(drv,hwy, data=mpg, geom = "boxplot", color= manufacturer)
qplot(hwy, data=mpg, fill = drv)
qplot(displ, hwy, data=mpg, . ~drv)
qplot(displ, hwy, data=mpg, facets=. ~drv)
qplot(hwy, data=mpg, facets = drv ~ .)
qplot(hwy, data=mpg, facets = drv ~ ., binwidth = 2)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?`lattice-package
?lattice-package
?`lattice-package`
library(datasets)
data("airquality")
qplot(Wind, Ozone, data= airquality, facets=.~factor(Month))
library(ggplot2)
library(ggplot2movies)
install.packages("ggplot2movies")
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
?llines
airquality = transform(airquality, Month = facto(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data= airquality, facets=.~Month)
setwd("C:/Users/Mahe/Documents/GitHub/RepData_PeerAssessment1")
source('C:/Users/Mahe/Documents/GitHub/RepData_PeerAssessment1/proj1.R', echo=TRUE)
source('C:/Users/Mahe/Documents/GitHub/RepData_PeerAssessment1/proj1.R', echo=TRUE)
data[which(is.na(data$steps)), "date"]
dates_of_na <- data[which(is.na(data$steps)), "date"]
merged_table <- merge(mean_table, data , by = c("date"))
merged_table <- merge(mean_table, data , by = "date")
?merge
merged_table <- merge(mean_table, data , by = "date")
colname(mean_table)
colnames(mean_table) <- c("date", "avg")
merged_table <- merge(mean_table, data , by = "date")
View(merged_table)
sum(is.na(merged_table$steps))
merged_table <- merge(mean_table, data , by = "date", all.y = TRUE)
sum(is.na(merged_table$steps))
sum(is.na(merged_table$avg))
sum(is.na(mean_table$avg))
merged_table <- merge(mean_table, data , by = "date", all.x = TRUE)
View(merged_table)
sum(is.na(merged_table$avg))
sum(is.na(merged_table$steps))
data[which(is.na(data$steps)),"steps", "date"]
data[which(is.na(data$steps)),"steps"]
dates_na <- data[which(is.na(data$steps)),"date"]
my_data <- data
my_data[which(is.na(data$steps)),"steps"] <- mean_table[which(my_data[which(is.na(data$steps)),"steps"]),"avg"]
length(data)
dim(data)[0]
dim(data)
dim(data)[1]
is.na(data[i]$steps)
is.na(data[0]$steps)
is.na(data[1]$steps)
is.na(data[1][0]$steps)
is.na(data[1][1]$steps)
StepsPerInterval <- tapply(activity$steps, activity$interval, mean, na.rm = TRUE)
# split activity data by interval
activity.split <- split(activity, activity$interval)
# fill in missing data for each interval
for(i in 1:length(activity.split)){
activity.split[[i]]$steps[is.na(activity.split[[i]]$steps)] <- StepsPerInterval[i]
}
activity.imputed <- do.call("rbind", activity.split)
activity.imputed <- activity.imputed[order(activity.imputed$date) ,]
source('C:/Users/Mahe/Documents/GitHub/RepData_PeerAssessment1/proj1.R', echo=TRUE)
source('C:/Users/Mahe/Documents/GitHub/RepData_PeerAssessment1/proj1.R', echo=TRUE)
source('C:/Users/Mahe/Documents/GitHub/RepData_PeerAssessment1/proj1.R', echo=TRUE)
source('C:/Users/Mahe/Documents/GitHub/RepData_PeerAssessment1/proj1.R', echo=TRUE)
source('C:/Users/Mahe/Documents/GitHub/RepData_PeerAssessment1/proj1.R', echo=TRUE)
mean(changed_total_steps_in_a_day)
median(changed_total_steps_in_a_day)
?weekdays
source('C:/Users/Mahe/Documents/GitHub/RepData_PeerAssessment1/proj1.R', echo=TRUE)
source('C:/Users/Mahe/Documents/GitHub/RepData_PeerAssessment1/proj1.R', echo=TRUE)
source('C:/Users/Mahe/Documents/GitHub/RepData_PeerAssessment1/proj1.R', echo=TRUE)
StepsPerInterval_weekday
StepsPerInterval_weekday
summary(StepsPerInterval_weekday)
source('C:/Users/Mahe/Documents/GitHub/RepData_PeerAssessment1/proj1.R', echo=TRUE)
source('C:/Users/Mahe/Documents/GitHub/RepData_PeerAssessment1/proj1.R', echo=TRUE)
source('C:/Users/Mahe/Documents/GitHub/RepData_PeerAssessment1/proj1.R', echo=TRUE)
source('C:/Users/Mahe/Documents/GitHub/RepData_PeerAssessment1/proj1.R', echo=TRUE)
source('C:/Users/Mahe/Documents/GitHub/RepData_PeerAssessment1/proj1.R', echo=TRUE)
source('C:/Users/Mahe/Documents/GitHub/RepData_PeerAssessment1/proj1.R', echo=TRUE)
source('C:/Users/Mahe/Documents/GitHub/RepData_PeerAssessment1/proj1.R', echo=TRUE)
source('C:/Users/Mahe/Documents/GitHub/RepData_PeerAssessment1/proj1.R', echo=TRUE)
View(changed_data)
avg_steps_taken= aggregate(changed_data$steps, by = list(changed_data$week), FUN = mean )
View(avg_no_steps_by_interal)
source('C:/Users/Mahe/Documents/GitHub/RepData_PeerAssessment1/proj1.R', echo=TRUE)
source('C:/Users/Mahe/Documents/GitHub/RepData_PeerAssessment1/proj1.R', echo=TRUE)
source('C:/Users/Mahe/Documents/GitHub/RepData_PeerAssessment1/proj1.R', echo=TRUE)
